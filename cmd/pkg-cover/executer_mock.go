// Code generated by mockery v1.0.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// mockExecuter is an autogenerated mock type for the executer type
type mockExecuter struct {
	mock.Mock
}

// covertOutputToCoverage provides a mock function with given fields: termOutput
func (_m *mockExecuter) covertOutputToCoverage(termOutput string) ([]testLine, error) {
	ret := _m.Called(termOutput)

	var r0 []testLine
	if rf, ok := ret.Get(0).(func(string) []testLine); ok {
		r0 = rf(termOutput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]testLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(termOutput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// runGoTest provides a mock function with given fields:
func (_m *mockExecuter) runGoTest() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// validateTestOutput provides a mock function with given fields: tl, o
func (_m *mockExecuter) validateTestOutput(tl []testLine, o string) error {
	ret := _m.Called(tl, o)

	var r0 error
	if rf, ok := ret.Get(0).(func([]testLine, string) error); ok {
		r0 = rf(tl, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
